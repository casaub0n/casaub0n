// @ts-check

/**
 * @see https://github.com/storybookjs/storybook/blob/a4b91eaf33dd38d6223aaf43fada8db94cf3ac77/code/frameworks/nextjs/README.md#getting-started
 */
import path from "path";
import TsconfigPathsPlugin from "tsconfig-paths-webpack-plugin";
import { VanillaExtractPlugin } from "@vanilla-extract/webpack-plugin";
import MiniCssExtractPlugin from "mini-css-extract-plugin";

// https://github.com/storybookjs/storybook/tree/next/code/frameworks/nextjs

/** @type { import('@storybook/nextjs').StorybookConfig } */
const config = {
  stories: [
    {
      directory: "../docs/",
      titlePrefix: "docs",
    },
    {
      directory: "../../casaub0n-page/src/",
      titlePrefix: "casaub0n-page",
    },
  ],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
    "@storybook/addon-docs",
    "@storybook/addon-styling-webpack",
  ],
  staticDirs: ["../../casaub0n-page/public"],
  framework: "@storybook/nextjs",
  core: {
    disableTelemetry: true,
  },
  docs: {
    autodocs: "tag",
    defaultName: "Documentation",
  },
  // ignore type because this is dynamic config
  webpackFinal: async (config) => {
    // @ts-ignore
    config.resolve.plugins = config.resolve.plugins || [];
    // @ts-ignore
    config.resolve.plugins.push(
      // @ts-ignore
      new TsconfigPathsPlugin({
        configFile: path.resolve(__dirname, "../../casaub0n-page/tsconfig.json"),
      }),
    );

    config.plugins?.push(new VanillaExtractPlugin(), new MiniCssExtractPlugin());

    // Exclude vanilla extract files from regular css processing
    config.module?.rules?.forEach((rule) => {
      if (
        typeof rule !== "string" &&
        // @ts-ignore
        rule.test instanceof RegExp &&
        // @ts-ignore
        rule.test.test("test.css")
      ) {
        // @ts-ignore
        rule.exclude = /\.vanilla\.css$/i;
      }
    });

    config.module?.rules?.push({
      test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
      use: [
        MiniCssExtractPlugin.loader,
        {
          loader: require.resolve("css-loader"),
          options: {
            url: false, // Required as image imports should be handled via JS/TS import statements
          },
        },
      ],
    });

    return config;
  },
};

export default config;
